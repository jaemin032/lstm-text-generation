"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const visor_1 = require("./components/visor");
let visorSingleton;
const DEFAULT_TAB = 'Visor';
const VISOR_CONTAINER_ID = 'tfjs-visor-container';
function visor() {
    if (typeof document === 'undefined') {
        throw new Error('No document defined. This library needs a browser/dom to work');
    }
    if (document.getElementById(VISOR_CONTAINER_ID) && visorSingleton != null) {
        return visorSingleton;
    }
    let visorEl = document.getElementById(VISOR_CONTAINER_ID);
    if (visorEl == null) {
        visorEl = document.createElement('div');
        visorEl.id = VISOR_CONTAINER_ID;
        document.body.appendChild(visorEl);
    }
    let renderRoot;
    function renderVisor(domNode, surfaceList) {
        let visorInstance;
        renderRoot = visor_1.VisorComponent.render(domNode, renderRoot, {
            ref: (r) => visorInstance = r,
            surfaceList: Array.from(surfaceList.values()),
        });
        return visorInstance;
    }
    const surfaceList = new Map();
    const visorComponentInstance = renderVisor(visorEl, surfaceList);
    visorSingleton = {
        el: visorEl,
        surface: (options) => {
            const { name } = options;
            const tab = options.tab == null ? DEFAULT_TAB : options.tab;
            if (name == null ||
                !(typeof name === 'string' || name instanceof String)) {
                throw new Error('You must pass a config object with a \'name\' property to create or retrieve a surface');
            }
            const finalOptions = Object.assign({}, options, { tab });
            const key = `${name}-${tab}`;
            if (!surfaceList.has(key)) {
                surfaceList.set(key, finalOptions);
            }
            renderVisor(visorEl, surfaceList);
            return visorComponentInstance.getSurface(name, tab);
        },
        isFullscreen: () => visorComponentInstance.isFullscreen(),
        isOpen: () => visorComponentInstance.isOpen(),
        close: () => visorComponentInstance.close(),
        open: () => visorComponentInstance.open(),
        toggle: () => visorComponentInstance.toggle(),
        toggleFullScreen: () => visorComponentInstance.toggleFullScreen(),
        bindKeys: () => visorComponentInstance.bindKeys(),
        unbindKeys: () => visorComponentInstance.unbindKeys(),
        setActiveTab: (tabName) => {
            const tabs = visorComponentInstance.state.tabs;
            if (!tabs.has(tabName)) {
                throw new Error(`Tab '${tabName}' does not exist`);
            }
            visorComponentInstance.setState({ activeTab: tabName });
        }
    };
    return visorSingleton;
}
exports.visor = visor;
//# sourceMappingURL=visor.js.map